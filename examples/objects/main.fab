/*
 * Copyright (c) 2023, Patrick Bene
 * This file is distributed under the Boost Software License, Version 1.0.
 * See LICENSE_1_0.txt or https://www.boost.org/LICENSE_1_0.txt 
 */

struct Bullet
    UF x
    UF y
    SF xspeed
    SF yspeed
    U life

macro("pool_contiguous", "Bullet", "8", "bullets")

struct Enemy
    U x
    U y

macro("pool_contiguous", "Enemy", "32", "enemies")

vars
    // Player variables:
    UF px = 128
    UF py = 120
    SF pxspeed = 0
    SF pyspeed = 0

mode main()
: nmi game_nmi
    palette = example_palette
    ppu_upload_palette()
    {PPUCTRL}(PPUCTRL_NMI_ON)

    // Randomly setup some enemies:
    seed(123)
    for U i = 0; i < enemies_max; i += 1
        enemies_new(Enemy(rand(), randb(240)))

    while true
        update_pads()
        move_player()
        if pads[0].pressed & BUTTON_A
            bullets_new(Bullet(px, py, SF(pxspeed * 2), SF(pyspeed * 2), 60))
        collide_bullets()
        move_bullets()
        move_enemies()
        update_sprites()
        nmi

fn move_player()
    ct Real ACCEL = 0.125

    if pads[0].held & BUTTON_LEFT
        pxspeed -= ACCEL
    else if pads[0].held & BUTTON_RIGHT
        pxspeed += ACCEL

    if pads[0].held & BUTTON_UP
        pyspeed -= ACCEL
    else if pads[0].held & BUTTON_DOWN
        pyspeed += ACCEL

    px += pxspeed
    py += pyspeed

fn move_bullets()
    for U i = 0; i < bullets_num;
        bullets[i].x += bullets[i].xspeed
        bullets[i].y += bullets[i].yspeed
        if bullets[i].life -= 1 // If the subtraction doesn't underflow.
            i += 1
        else
            bullets_delete(i)

fn move_enemies()
    for U i = 0; i < enemies_num; i += 1
        enemies[i].x += 1

// Helper function for geometry.fab library:
fn bullet_rect(U i) Rect
    return Rect(Coord(bullets[i].x.a, bullets[i].y.a), Dimen(8, 8))

// Helper function for geometry.fab library:
fn enemy_rect(U i) Rect
    return Rect(Coord(enemies[i].x, enemies[i].y), Dimen(8, 8))

fn collide_bullets()
    for U i = 0; i < bullets_num;
        for U j = 0; j < enemies_num;
            if overlap(bullet_rect(i), enemy_rect(j)) // If they collide:
                bullets_delete(i)
                enemies_delete(j)
                goto next_iter
            else
                j += 1
        i += 1
        label next_iter

fn update_sprites()
    // Our stack index into OAM:
    U o = 0

    // Player:
    set_oam(o, px.a, py.a - 1, $00, 0)
    o += 4

    // Bullets:
    for U i = 0; i < bullets_num; i += 1
        set_oam(o, bullets[i].x.a, bullets[i].y.a - 1, $00, 1)
        o += 4

    // Enemies:
    for U i = 0; i < enemies_num; i += 1
        set_oam(o, enemies[i].x.a, enemies[i].y.a - 1, $00, 2)
        o += 4

    // Clear the remainder of OAM
    hide_oam(o)

nmi game_nmi()
    // Update OAM and poll the pads:
    ppu_upload_oam_poll_pads(0)

    // Turn on rendering:
    {PPUMASK}(PPUMASK_SPR_ON | PPUMASK_NO_CLIP)

    // Reset the scroll
    ppu_reset_scroll(0, 0)

chrrom
    U[16]($FF)
